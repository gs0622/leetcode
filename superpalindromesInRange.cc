#include <bits/stdc++.h>
using namespace std;
class Solution {
        bool isPalindrome(long long n) {
                if (n<0) return false;
                long long div=1;
                while (div*10<=n)
			div*=10;              // alternate: while (n/div>=10) div*=10;
                while (n!=0) {
                        if (n/div!=n%10) return false;  // compare MSB/LSB two digits
                        n=(n%div)/10;                   // strip MSB/LSB two digits
                        div/=100;
                }
                return true;
        }
public:
	// Brute-force, TLE
	int superpalindromesInRange(string L, string R) {
		long long LL=stoll(L), RR=stoll(R), res=0;
		for (long long i=1; i*i<=RR; ++i) {
			long long candidate = i*i;
			if (candidate >= LL && isPalindrome(i) && isPalindrome(candidate)) {
				//cout << i << ": " << candidate << endl;
				cout << candidate << endl;
				++res;
			}
		}
		return (int)res;
	}
};
class Solution2 {
	vector<uint64_t> values {
		0, 1, 4, 9, 121, 484, 676, 10201, 12321, 14641, 40804, 44944, 69696, 94249, 698896, 1002001, 1234321, 
		4008004, 5221225, 6948496, 100020001, 102030201, 104060401, 121242121, 123454321, 125686521, 400080004, 
		404090404, 522808225, 617323716, 942060249, 10000200001, 10221412201, 12102420121, 12345654321, 
		40000800004, 637832238736, 1000002000001, 1002003002001, 1004006004001, 1020304030201, 1022325232201, 
		1024348434201, 1086078706801, 1210024200121, 1212225222121, 1214428244121, 1230127210321, 1232346432321, 
		1234567654321, 1615108015161, 4000008000004, 4004009004004, 4051154511504, 5265533355625, 9420645460249, 
		100000020000001, 100220141022001, 102012040210201, 102234363432201, 121000242000121, 121242363242121, 
		123212464212321, 123456787654321, 123862676268321, 144678292876441, 165551171155561, 400000080000004, 
		900075181570009, 4099923883299904, 10000000200000001, 10002000300020001, 10004000600040001, 10020210401202001, 
		10022212521222001, 10024214841242001, 10201020402010201, 10203040504030201, 10205060806050201, 
		10221432623412201, 10223454745432201, 12100002420000121, 12102202520220121, 12104402820440121, 
		12120030703002121, 12122232623222121, 12124434743442121, 12321024642012321, 12323244744232321, 
		12341234943214321, 12343456865434321, 12345678987654321, 40000000800000004, 40004000900040004, 94206450305460249,
	};
public:
	int superpalindromesInRange(string L, string R) {
		auto l = lower_bound(values.begin(), values.end(), stoll(L));
		auto r = lower_bound(values.begin(), values.end(), stoll(R));
		for (; l!=r; ++l)
			cout << *l << ": " << (long long)round(sqrt(*l)) << endl;
		return (int)distance(l, r);
	}
};
class Solution3 {
	vector<uint64_t> values {
		1,4,9,121,484,
		10201,12321,14641,40804,44944,1002001,1234321,4008004,100020001,102030201,104060401,121242121,
		123454321,125686521,400080004,404090404,10000200001,10221412201,12102420121,12345654321,40000800004,
		1000002000001,1002003002001,1004006004001,1020304030201,1022325232201,1024348434201,1210024200121,
		1212225222121,1214428244121,1232346432321,1234567654321,4000008000004,4004009004004,100000020000001,
		100220141022001,102012040210201,102234363432201,121000242000121,121242363242121,123212464212321,
		123456787654321,400000080000004,10000000200000001,10002000300020001,10004000600040001,10020210401202001,
		10022212521222001,10024214841242001,10201020402010201,10203040504030201,10205060806050201,10221432623412201,
		10223454745432201,12100002420000121,12102202520220121,12104402820440121,12122232623222121,12124434743442121,
		12321024642012321,12323244744232321,12343456865434321,12345678987654321,40000000800000004,40004000900040004
	};
public:
	//Solution3(){cout<<values.size()<<endl;}
	int superpalindromesInRange(string L, string R) {
		auto l = lower_bound(values.begin(), values.end(), stoll(L));
		auto r = lower_bound(values.begin(), values.end(), stoll(R));
		return (int)distance(l, r);
	}
};
int main(){
	Solution s;
	Solution3 s3;
	//cout << s.superpalindromesInRange("1", "999999999999999999") << endl;
	cout << s3.superpalindromesInRange("38455498359", "999999999999999999") << endl;
}
